!!ARBvp1.0

#*  Visla -- Visualisation Library for Accelerators
#*
#*  Copyright (C) 2003  Petr Kadlec <mormegil@centrum.cz>
#*
#*  This library is free software; you can redistribute it and/or
#*  modify it under the terms of the GNU Lesser General Public
#*  License as published by the Free Software Foundation; either
#*  version 2.1 of the License, or (at your option) any later version.
#*
#*  This library is distributed in the hope that it will be useful,
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#*  Lesser General Public License for more details.
#*
#*  You should have received a copy of the GNU Lesser General Public
#*  License along with this library; if not, write to the Free Software
#*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This vertex program computes a spline interpolation and converts scalar value
# to texture coordinate for every vertex.
# It also does the basic functions:
#   - transforms vertices to homogenous clip space
#
# c[0]...c[3]      contains the modelview projection composite matrix
# c[4]             x contains the lower bound of scalar values, y contains 1/(upper - lower)
# c[5]             contains some useful constants {0, 0.5, 1.0, 2.0}
# c[6]             contains the quad size (z = 0)
# c[7]             contains the quad origin
# c[8]...c[11]     contains the spline value matrix
# c[12]            contains the modulation color
#
# Per-Vertex Attribute data:
# v[0] (1,x,x^2,x^3)
# v[1] (1,y,y^2,y^3)
# Relevant Output registers:
# o[HPOS] output register for homogeneous position
# o[TEX0] output register for texture coordinate 0
# o[COL0] output register for primary color
#
# Temporary Registers:
# R0, R1, R2

TEMP R0, R1, R2;

ATTRIB vX = vertex.attrib[0];
ATTRIB vY = vertex.attrib[1];

PARAM cMatrix[4] = { program.local[0..3] };
PARAM cRange = program.local[4];
PARAM cConsts = program.local[5];
PARAM cQuadSize = program.local[6];
PARAM cQuadOrigin = program.local[7];
PARAM cSplineMatrix[4] = { program.local[8..11] };
PARAM cColor = program.local[12];

# Get coordinates x,y,1,1 -> r0
MOV R0, vY.yyxx;
MOV R0.x, vX.y;

# Get value
DP4 R2.x, vX, cSplineMatrix[0];
DP4 R2.y, vX, cSplineMatrix[1];
DP4 R2.z, vX, cSplineMatrix[2];
DP4 R2.w, vX, cSplineMatrix[3];
DP4 R0.z, R2, vY;

# Scale and translate vertex
MUL R1, R0, cQuadSize;
ADD R1, R1, cQuadOrigin;

# Transform vertex to screen
DP4 R2.x, cMatrix[0], R1;
DP4 R2.y, cMatrix[1], R1;
DP4 R2.z, cMatrix[2], R1;
DP4 R2.w, cMatrix[3], R1;
MOV result.position, R2;

# Output the color
MOV result.color, cColor;

# Compute the texture coordinate
ADD R1.x, R0.z, -cRange.x;
MUL result.texcoord.x, R1.x, cRange.y;

END
